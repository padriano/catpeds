<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  
  <parent>
    <groupId>com.catpeds</groupId>
    <artifactId>catpeds</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  
  <artifactId>catpeds-rest</artifactId>
  <name>CatPeds REST endpoint provider</name>
  
  <properties>
    <docker.registry>docker.io</docker.registry>
    <docker.image.prefix>npadriano</docker.image.prefix>
    <deploy.artifacts.path>${project.build.directory}/deploy</deploy.artifacts.path>
    <jar.dependencies.path>lib/</jar.dependencies.path>
    <scripts.path>scripts</scripts.path>
    <script.app>${artifactId}.sh</script.app>
    <deploy.user>ubuntu</deploy.user>
    <deploy.server>catpeds.duckdns.org</deploy.server>
    <deploy.server.path>~/${artifactId}</deploy.server.path>
    <deploy.stop.timeout>5</deploy.stop.timeout>
    <!-- Sample property values that need to be overriden in the CI mvn command -->
    <deploy.key.path>/Users/padriano/.ssh/aws-key-pair-1.pem</deploy.key.path>
    <dns.domain>example</dns.domain>
    <dns.token>foobar</dns.token>
  </properties>
  
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.catpeds</groupId>
        <artifactId>catpeds-bom</artifactId>
        <version>1.0-SNAPSHOT</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  
  <dependencies>
    <dependency>
      <groupId>com.catpeds</groupId>
      <artifactId>catpeds-crawler-pawpeds</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-hateoas</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.jayway.jsonpath</groupId>
      <artifactId>json-path</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>com.spotify</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>1.0.0</version>
        </plugin>
        <plugin>
          <groupId>pl.project13.maven</groupId>
          <artifactId>git-commit-id-plugin</artifactId>
          <version>2.2.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.0.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>1.8</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>1.6.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
    
    <plugins>
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <configuration>
          <imageName>${docker.registry}/${docker.image.prefix}/${project.artifactId}</imageName>
          <imageTags>
            <imageTag>${git.commit.id.abbrev}</imageTag>
            <imageTag>latest</imageTag>
          </imageTags>
          <dockerDirectory>${project.artifactId}/docker</dockerDirectory>
          <resources>
            <resource>
              <targetPath>/</targetPath>
              <directory>${deploy.artifacts.path}</directory>
              <include>${project.build.finalName}.jar</include>
            </resource>
            <resource>
              <targetPath>/</targetPath>
              <directory>${deploy.artifacts.path}</directory>
              <include>${jar.dependencies.path}</include>
            </resource>
          </resources>
        </configuration>
      </plugin>
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
          <generateGitPropertiesFile>false</generateGitPropertiesFile>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <mainClass>com.catpeds.rest.Application</mainClass>
              <classpathPrefix>${jar.dependencies.path}</classpathPrefix>
            </manifest>
          </archive>
          <outputDirectory>${deploy.artifacts.path}</outputDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${deploy.artifacts.path}/${jar.dependencies.path}</outputDirectory>
              <includeScope>runtime</includeScope>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy scripts</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${deploy.artifacts.path}</outputDirectory>
              <resources>
                <resource>
                  <directory>${scripts.path}</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>make scripts executable</id>
            <phase>package</phase>
            <configuration>
              <target>
                <chmod perm="700">
                  <fileset dir="${deploy.artifacts.path}">
                    <include name="*.sh"/>
                  </fileset>
                </chmod>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>stop-server</id>
<!--             <phase>install</phase> -->
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>ssh</executable>
              <arguments>
                <argument>-i</argument>
                <argument>${deploy.key.path}</argument>
                <argument>${deploy.user}@${deploy.server}</argument>
                <argument>-tt</argument>
                <argument>sh ${deploy.server.path}/${script.app} stop &amp;&amp; sleep ${deploy.stop.timeout}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>clean-server</id>
<!--             <phase>install</phase> -->
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>ssh</executable>
              <arguments>
                <argument>-i</argument>
                <argument>${deploy.key.path}</argument>
                <argument>${deploy.user}@${deploy.server}</argument>
                <argument>-tt</argument>
                <argument>rm -rf ${deploy.server.path} &amp;&amp; rm ${artifactId}.pid</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>deploy-server</id>
<!--             <phase>install</phase> -->
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>scp</executable>
              <arguments>
                <argument>-p</argument>
                <argument>-r</argument>
                <argument>-i</argument>
                <argument>${deploy.key.path}</argument>
                <argument>${deploy.artifacts.path}</argument>
                <argument>${deploy.user}@${deploy.server}:${deploy.server.path}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>start-server</id>
<!--             <phase>install</phase> -->
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>ssh</executable>
              <arguments>
                <argument>-i</argument>
                <argument>${deploy.key.path}</argument>
                <argument>${deploy.user}@${deploy.server}</argument>
                <argument>-T</argument>
                <argument>sh ${deploy.server.path}/${script.app} start</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
